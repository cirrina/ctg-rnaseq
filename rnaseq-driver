#!/bin/bash


#######################################
# driver for  ctg-rnaseq pipeline
#######################################

## INPUT: CTG IEM Sample Sheet
## INPUT: FASTQ files (default fastq parth is output from bcl2fastq analysis)


# scripts_root='/Users/david/scripts' #

# script execution dir. If generate workfolder & copy scripts, this WILL be checked & warn against the script version rovided in samplesheet
# if initiating script in project workfolder, the script here is used & version will not be checked
script_exec_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd ) # Where is this script located...

## Root directories (based on ourr set folder naming conventions on lsens)

scripts_root="/projects/fs1/shared/ctg-dev/pipelines"
project_root='/projects/fs1/shared/ctg-projects'
delivery_root='/projects/fs1/shared/ctg-delivery' ## should be added pipelineProfile/ProjectID
ctg_save_root='/projects/fs1/shared/ctg-qc/ctg-rnaseq' ## should be added pipelineProfile/ProjectID

## Script & config names
rnaseq_script="rnaseq-main.sh"
nf_script="rnaseq-main.nf"
nf_config_project="${project_dir}/nextflow.params.${projectid}"




#######################
#  == Initiation ==
#######################
fastq_custom=true ## set to false if no fastq_input_path is supplied (will defalt to {project_})
prime_projectfolder_mode=false ## -p true,  if to generate project folder and configs, but not initiate the nextgflow
resume=false ## used to resume nextflow pipeline, Need to be executed within project workfolder.
exec_dir=$(pwd)

# usage message
usage() {
    echo ""
    echo ""
    echo "------------------- "
    echo " usage : "
    echo "------------------- "
    echo " rnaseq-driver [ -s samplesheet ] [ -p prime_projectfolder_only ] [ -r resume ] [ -f fastq_input_path ] [ -h help ] "  1>&2
    echo ""
    echo "------------------- "
    echo " arguments : "
    echo "------------------- "
    echo " samplesheet    -s : IEM style laboratory SampleSheet. Project and pipeline specific parameters must be added "
    echo ""
    echo " (see https://github.com/cirrina/rnaseq/blob/main/README.md for details)"
    echo ""
    echo " Required [header] rows for SampleSheet include:"
    echo ""
    echo " ProjectId:        CTG project id, e.g. '2021_026'. Will define downstream analysis folder and filenames."
    echo "                   If a project is run multiple times with different settings. Modify the project id and sample sheet accordingly."
    echo " RunFolder:        Name (not full path) of Illumina runfolder, e.g. . Set to NA if unknown and custom fastq files are run"
    echo " PipelineName:     The CTG analysis pipeline, e.g. ctg-rnaseq"
    echo " PipelineVersion:  The CTG analysis pipeline version. Must match the ctg pipeline naming nomenclature, e.g. '2.0.0' or 'dev' etc"
    echo " PipelineProfile:  Determines the --proile flag of nextflow execution. Currently 'rnaseq' or 'uroscan' is supported."
    echo " Barcode:          Illumina flowcell barcode"
    echo " Runfolder:        Name of the runfolder directory (dirname not full path)"
    echo " Instrument:       Name of instrument and chemistry vesrsion, NovaSeq1.5 or NovaSeq1.0"
    echo " FlowCell:         What flowcell is used"
    echo " SharedFlowCell:  'true' or 'false'. If the pool/flowcell includes more than one customer projects."
    echo " PoolName:         Name of ctg pool, i.e. name of the library pool added to flowcell, e.g. 'CTGpool_0150'"
    echo " Species:          Species for all samples in current sample sheet (species_all_samples), e.g. Homo sapiens. Set to 'Multiple' if multiple species - this assumes that no alignment is performed."
    echo ""
    echo ""
    echo "------------------- "
    echo " optionals : "
    echo "------------------- "
    echo " prime_projectfolder_mode:  -p : Set to 'true' if you do not start nextflow. A dry run that will generate project folder, config files etc but will not initiate nextflow."
    echo " fastq_input_path:      -f : Set to a full path where all fastq files are located. individual filenames should be specified in ctg sample sheet. This flag will set 'run_blcl2fastq' to 'false' and all flags related to demux to false "
    echo " resume           -r : Nextflow-specific. If to resume nextflow run. Can only be used when executing in Project work dir, NOT from Illumina runfolder"
    echo " help             -h : print help message"
    echo "------------------- "
    echo ""
    echo ""
}

exit_abnormal() {
  usage
  echo "";echo "";echo ""
  echo "----------------------- "
  echo "  ERROR  "
  echo "----------------------- "
  echo "";echo "";echo ""
  echo "";echo "";echo ""
  exit 1
}


################################################
# == 1 ==   Check input arguments
################################################

while getopts ":s:f:r:p:h" opt; do
    case $opt in
      s) samplesheet=$OPTARG
	          ;;
      f) fastq_input_path=$OPTARG
            ;;
      r) resume=true
       	    ;;
      p) prime_projectfolder_mode=true
            ;;
      h) exit_abnormal
        ;;
      \?) echo echo ""; echo "Error:";"Invalid option -$OPTARG" >&2
        exit_abnormal ;;
      :) echo ""; echo "Error:"; echo " -${OPTARG} requires an argument!"
	     exit_abnormal ;;
    esac
done



shift "$(( OPTIND -1 ))"

## Check Sample Sheet. if file is present in work directory.
if [ -z $samplesheet ]; then
  echo ""; echo ""; echo "Error:"
  echo "You must specify sample sheet (in current dir): '-s' flag. "; echo ""
  exit_abnormal
fi
if [ ! -f $samplesheet ]; then
  echo ""; echo ""; echo "Error:"
  echo "Sample Sheet does not exist (in current dir)"
  #echo "- Please specify correct samplesheet, or create a CTG_SampleSheet.csv in current runfolder"
  exit_abnormal
fi

## If -f is defined (fastq_input_path), set fastq_custom to true
if [ -z $fastq_input_path ]; then
  fastq_custom=false
fi
## check if supplied fastq_input_path is valid
if [[ ${fastq_custom} == "true" ]]; then
  fastq_custom=true
  fastq_input_path=$(realpath $fastq_input_path)
  echo ""; echo " Custom fastq mode set to: ${fastq_custom}"; echo ""
  if [[ ! -d ${fastq_input_path} ]]; then
    echo ""; echo ""; echo "Error:"
    echo "fastq_input_path (-f) does not exist: ${fastq_input_path} "; echo ""
    exit_abnormal
  fi
fi



################################################
##   == 2 == Read paramters from SampleSheet
################################################

# check that samplesheet is a proper CTG IEM style sheet
if [[ $(cat ${samplesheet} | grep "\[Header\]" | cut -f1 -d ",") != "[Header]" ]]
  then
    echo " ERROR: ${samplesheet} does not seem to be a valid SampleSheet - lacking first row [Header]."
    exit 0
fi
echo " Reading SampleSheet params:"
echo "  ... samplesheet: $samplesheet"


## Read PROJECT ID from samplesheet
## ----------------------------------------------
projectid=$(awk -F, '$1 == "ProjectId"' ${samplesheet} | awk -F, '{print $2}')
echo "  ... project id: $projectid"

if [ -z "$projectid" ]; then
  echo ""; echo "Error: "
  echo " ProjectId is not properly supplied in samplesheet."
  echo " CTG Project id must be given as 'ProjectId' within the [Header] section of sample sheet"; echo""; echo ""
  exit_abnormal
fi
if [[ $projectid =~ ' ' ]]; then
  echo ""; echo ""; echo "Error: "
  echo " Warning: project id must not inlude white space ' '"; echo""; echo ""
  exit_abnormal
fi
if [[ $projectid =~ \\. ]]; then
  echo ""; echo ""; echo "Error: "
  echo " Warning: project id must not inlude a dot '.'"; echo""; echo ""
  exit_abnormal
fi


## Read CTG PIPELINE parameters from samplesheet.
## ----------------------------------------------
pipelineName=$(awk -F, '$1 == "PipelineName"' ${samplesheet} | awk -F, '{print $2}')
echo "  ... pipelineName: $pipelineName"
pipelineVersion=$(awk -F, '$1 == "PipelineVersion"' ${samplesheet} | awk -F, '{print $2}')
echo "  ... pipelineVersion: $pipelineVersion"
pipelineProfile=$(awk -F, '$1 == "PipelineProfile"' ${samplesheet} | awk -F, '{print $2}')

# PipelineName
if [ -z "$pipelineName" ]; then
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
  echo "Warning: 'PiepelineName' is not properly supplied in samplesheet. \
 Must be given as 'PipelineName, rnaseq' within the [Header] section of sample sheet"; echo""; echo ""
  exit_abnormal
fi
# PipelineVersion
## --------------------------
if [ -z "$pipelineVersion" ]; then
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR : "; echo " ---------------------------  ";
  echo "Warning: 'PiepelineVersion' is not properly supplied in samplesheet. \
 Must be given as 'PipelineVersion, 3.0.0' within the [Header] section of sample sheet"; echo""; echo ""
  exit_abnormal
fi

## Profile uroscan or rnaseq or rnaseq_total
if [ -z "$pipelineProfile" ]; then
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR : "; echo " ---------------------------  ";
  echo "Warning: 'pipelineProfile' is not properly supplied in samplesheet. \
 Must be given as 'uroscan, rnaseq or rnaseq_total' within the [Header] section of sample sheet"; echo""; echo ""
  exit_abnormal
fi
if [[ $pipelineProfile == "rnaseq" ]]; then
  echo "  ... pipelineProfile: $pipelineProfile"
elif [[ $pipelineProfile == "rnaseq_total"  ]]; then
  echo "  ... pipelineProfile: $pipelineProfile"
elif [[ $pipelineProfile == "uroscan"  ]]; then
  echo "  ... pipelineProfile: $pipelineProfile"
else
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR : "; echo " ---------------------------  ";
  echo "Warning: 'pipelineProfile' is not properly supplied in samplesheet. \
 Must be given as 'uroscan or rnaseq' within the [Header] section of sample sheet"; echo""; echo ""
  exit_abnormal
fi


## Read Species from samplesheet Header.
## -------------------------------
# indicate shared species, i.e. for all samples. Will only be used for modules that input ALL samples. Default is to use the species option supplied as column header in [Data] section.
species_all_samples=$(awk -F, '$1 == "Species"' ${samplesheet} | awk -F, '{print $2}')
echo "  ... species_all_samples (applied to all samples, from samplesheet [Header]): ${species_all_samples}"

sharedflowcell=$(awk -F, '$1 == "SharedFlowCell"' ${samplesheet} | awk -F, '{print $2}')
echo "  ... SharedFlowCell: ${sharedflowcell}"
if [ -z "$sharedflowcell" ]; then
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
  echo " SharedFlowCell is not properly supplied in samplesheet."
  echo " Must be supplied as 'SharedFlowCell' 'true' OR 'false' within the [Header] section of sample sheet"; echo""; echo ""
  exit_abnormal
fi


## Read if shared flow cell or not (not sure if to use or not...)
## -------------------------------
if [[ ${sharedflowcell} != "true" ]] || [[ ${sharedflowcell} != "false"  ]]; then
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
  echo " SharedFlowCell is not properly supplied in samplesheet. \
  Must be supplied as 'SharedFlowCell' 'true' OR 'false' within the [Header] section of sample sheet"; echo" This to indicate wether multiple customer projects are present within the runfolder data"; echo ""
  exit_abnormal
fi



######################################################
##  == 3 == Set paths and filenames based on input params
######################################################

# set project work dir
project_dir="${project_root}/${pipelineName}/${pipelineProfile}/${projectid}"
delivery_dir="${delivery_root}/${pipelineName}/${pipelineProfile}/${projectid}"
ctg_save_dir=="${ctg_save_root}/${pipelineName}/${pipelineProfile}/${projectid}"
## scripts - where and what version of pipelie sctips to copy to project work dir
# e.g. scripts_dir='/projects/fs1/shared/ctg-dev/pipelines/rnaseq/v1.0' # "/Users/david/scripts/ctg-rnaseq/workflow/" REPLACE WITH BASEDIR FROM SCRIPT EXECUTIoN
scripts_dir="${scripts_root}/${pipelineName}/${pipelineVersion}"

## Set fastq_dir - defaults to the output (delivery) path If not supplied through -f argument (above)
if [[ ${fastq_custom} == "true" ]]; then
  fastq_dir=${fastq_input_path}
fi
if [[ ${fastq_custom} == "false" ]]; then
  fastq_dir="${project_dir}/nf-output/fastq/${projectid}" # defaults to blc2fastq output format - ../fastq/project_id
  echo ""; echo " No Custom fastq specified. Using default: ${fastq_dir}"; echo ""
  if [[ ! -d $fastq_dir ]]; then
    echo " Fastq dir does not exist."
    exit_abnormal
  fi
fi

##  Check if scripts_dir exist
if [[ ! -d ${scripts_dir} ]]; then
  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
  echo " scripts_dir does not exist: ${scripts_dir} "; echo ""
  echo " Make sure PipelineName and PipelineVersion are correctly supplied in SampleSheet"; echo " AND that they match a directory whtin the scripts_root folder: ${scripts_root}."
  exit_abnormal
else

## if -p true, prime_projectfolder_mode. must be executed outside execution dir.
if [[ ${prime_projectfolder_mode} == "true" && "${exec_dir}" == "${project_dir}" ]]; then
  echo ""; echo " Can not prime workfolder with the same path as the one where script is executed"; echo ""
  echo " You must specify a different projectId wihtin your SampleSheet"
  exit_abnormal
fi



# #############################################################################
#  == 4.a == IF RESUME FLAG - Try Resume Nextflow Pipeline using RESUME
# #############################################################################
if [[ $resume == "true" ]]; then
  if [[ "${script_exec_dir}" != "${project_dir}" ]]; then
    echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
    echo " Nextflow resume flag -r must used when executing script from the project folder defined by projectId in samplesheet"
    echo " Move to project directory and initiate resume"
    echo""; echo ""
    exit_abnormal
  fi
  echo " RESUME mode"
  echo " ... trying to resume nextflow"
  echo " ... Hail mary !!! "
  nohup nextflow run ${nf_script} -c ${nf_config_project} -profile ${pipelineProfile} --resume > log.nextflow.rnaseq &
  echo " ... :  nextflow run ${nf_script} -c ${nf_config_project} --resume"
  exit 0
fi




################################################
##  == 4.b ==  projectfolder_setup_mode = true
################################################
# if executed outside the project dir, then initiate in projectfolder_setup_mode
# This will generate a project folder and copy the scrips (of specfied version) to work folder
# IF workfolder and scripts exists these will be overwritten.

if [[ "${exec_dir}" != "${project_dir}" ]]; then

  echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
  echo " Executing script outside defined project workfolder."
  projectfolder_setup_mode=true
  echo "  ... ... projectfolder_setup_mode: ${projectfolder_setup_mode}"

  ## verify that script execution dir matches the path in which this script was executed
  if [[ "${script_exec_dir}" != "${scripts_dir}" ]]; then
    echo ""; echo ""; echo " ---------------------------  "; echo " ERROR "; echo " ---------------------------  ";echo ""
    echo " PipelineVersion in SampleSheet does not match the scripts_dir where this script is initiated : "
    echo " ... scripts version specific dir (given in SampleSheet) : ${scripts_dir} ";
    echo " ... script execution dir : ${script_exec_dir} "; echo ""
  fi

  ## Warnings & Prompt.
  echo ""
  echo "  ... ... scripts_dir:  $scripts_dir"
  echo "  ... ... project workfolder:  $project_dir "
  echo ""
  # Prompt user to approve running in current directory and input
  read -p "
  proceed? (y/n)
   ... " prompt

  if [[ $prompt != "y" ]]; then
      echo ""; echo " Exiting!! "
      exit 0
  fi
  echo ""

  if [[ -d ${project_dir} ]]; then
    echo ""
    read -p "  ... Warning!!
  ... ... project work folder already exists!
  ... ... scripts & configs will be overwritten!

  proceed? (y/n)
   ... " prompt
    if [[ $prompt != "y" ]]; then
        echo ""; echo "Exiting!! "
        exit 0
    fi
  fi
  echo ""
  echo ""

  ## Create project directory
  mkdir -p ${project_dir}
  cd ${project_dir}

  ## Copy scripts from version specific pipeline scripts dir
  cp -r ${scripts_dir}/* ${project_dir}/ # copy all scripts to workfolder. Will overwrite netflow.config

  ## Copy samplesheet to project workfolder
  cp ${samplesheet} ${project_dir}

  # Create nextflow configuration file -- nextflow.params_${projectid} --
  #######################################################################
  echo ""
  echo " ... Writing nextflow parameters to project-specific config: ${nf_config_project}"

  ## Write nextflow params to file
  echo ""  > $nf_config_project
  echo "//  nextflow configuration file"                              >> $nf_config_project
  echo "//  Project:  ${projectid}"                                   >> $nf_config_project
  echo ""                                                             >> $nf_config_project
  echo "//  project specific parameters"                              >> $nf_config_project
  echo "//  will override params in 'nextflow.config' "               >> $nf_config_project
  echo "//"                                                           >> $nf_config_project
  echo ""                                                             >> $nf_config_project
  echo " params {"                                                      >> $nf_config_project
  echo ""                                                               >> $nf_config_project
  echo "  // Pipeline                                                 " >> $nf_config_project
  echo "  pipelineName      =  '${pipelineName}'                      " >> $nf_config_project
  echo "  pipelineProfile   =  '${pipelineProfile}'                   " >> $nf_config_project
  echo "  pipelineVersion   =  '${pipelineVersion}'                   " >> $nf_config_project
  echo "  script_execution_dir  =  '${script_exec_dir}'               " >> $nf_config_project
  echo ""                                                               >> $nf_config_project
  echo "  // Project and run directries                               " >> $nf_config_project
  echo "  projectid           =  '${projectid}'                       " >> $nf_config_project
  echo "  project_dir         =  '${project_dir}'                      " >> $nf_config_project
  echo "  delivery_dir        =  '${project_dir}'                      " >> $nf_config_project
  echo "  ctg_save_dir        =  '${ctg_save_dir}'                   " >> $nf_config_project
  echo "  fastqdir            =  '${fastq_dir}'                        " >> $nf_config_project
  echo ""                                                               >> $nf_config_project
  echo "  sharedflowcell      =   ${sharedflowcell}                   " >> $nf_config_project
  echo "  species_all_samples =  '${species_all_samples}'              " >> $nf_config_project
  echo ""                                                               >> $nf_config_project
  echo "  //  samplesheets                                            " >> $nf_config_project
  echo "  samplesheet           =  '${samplesheet_ctg}'               " >> $nf_config_project
  echo "  samplesheet_nf        =  '${samplesheet_nextflow}'          " >> $nf_config_project
  echo ""                                                               >> $nf_config_project
  echo "  // root directories                                         " >> $nf_config_project
  echo "  project_root        =  '${project_root}'                    " >> $nf_config_project
  echo "  delivery_root       =  '${delivery_root}'                   " >> $nf_config_project
  echo "  ctg_save_root       =  '${ctg_save_root}'                   " >> $nf_config_project
  echo ""                                                               >> $nf_config_project
  echo " }"                                                             >> $nf_config_project
  echo ""                                                               >> $nf_config_project

  #  Priming of project folder complete
  ## --------------------------------
  echo "";echo ""
  echo "  Project primed"
  echo "  ... Project dir        :  ${project_dir}"
  echo "  ... Nextflow config    :  ${nf_config_project}"
  echo "  ... samplesheet        :  ${samplesheet}"
  echo "  ... Scripts dir        :  ${scripts_dir}"
  echo ""

  chmod -R 775 ${project_dir}
  cd ${project_dir}

  if [[ $prime_projectfolder_mode == "true" ]]; then
    echo ""
    echo " prime_projectfolder_mode is TRUE "
    echo " ... exiting without submitting nextflow run"
    echo " ... go to runfolder and edit your configs, then start run using rnaseq-driver"
    exit 0
  fi
fi # end if projectfolder_setup_mode


#
################################################
##  == 4.c ==  Script executed within project folder (projectfolder_setup_mode = false)
################################################
if [[ "${exec_dir}" == "${project_dir}" ]]; then
  ## add expected files - nextflow.main config.project ...
  echo " Script executed within the defined project workfolder."
  echp " ... will NOT overwrite scripts and configs. Assume all scripts are present."
  projectfolder_setup_mode=false
fi



###################################################################
# == 5 == Final Check expected f\les needed for nextflow initiation
###################################################################
## Check if nextflow config files are present
cd ${project_dir}
if [ ! -f ${nf_config_project} ]; then # | ! -f "${execdir}/nextflow.config" | ! -f "${execdir}/rnaseq.nf"
  echo ""; echo "Error:"
  echo "'${nf_config_project}' does not exist in current dir. Generate this in projectfolder_setup_mode or crete one from template."; echo ""; echo ""
  exit_abnormal
fi
if [ ! -f "${project_dir}/nextflow.config" ]; then # | ! -f "${execdir}/nextflow.config" | ! -f "${execdir}/rnaseq.nf"
  echo ""; echo "Error:"
  echo "'nextflow.config' file does not exist in project work directory"; echo ""; echo ""
  exit_abnormal
fi



################################################
##  == 6 ==  Execute the NextFlow rnaseq-main.nf sctipt
################################################
cd ${project_dir}

echo ""; echo "";
echo " Initiating nextflow pipeline"
echo " ... pipelineName      : $pipelineName";
echo " ... pipelineVersion   : $pipelineVersion";
echo " ... pipelineProfile   : $pipelineProfile";
echo " ... project id    : $projectid";
echo " ... project dir   : $execdir";
echo ""; echo "";

# Prompt user to approve running in current directory and input
echo "";
read -p "
  Initiating nextflow pipeline - proceed? (y/n)
  ... " prompt
if [[ $prompt != "y" ]]; then
  echo ""; echo "Exiting!! "
  exit 0
fi

## intiate the nextflow command. include project specific config & profile -p
nohup nextflow run $nf_script -c $nf_config_project -profile ${pipelineProfile} > log.nextflow.progress &

echo "";echo ""
echo "  Running :   nextflow run $nf_pipe -c $nf_config_project -profile ${pipelineProfile}"
echo "";
echo "  ########################## "
echo "      S U B M I T T E D "
echo "  ########################## "
echo "  Logfile :  ${project_dir}/log.nextflow.progress "
echo ""
