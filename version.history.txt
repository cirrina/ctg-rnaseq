
v2.x updates



DO NOT READ SCRIPT FROM WITHIN Folder

From where is tehe scritp run!!
change to that it is downloaded each time. (nextflow main)
what about the config!?


Initiate project folder NOT from runfolder


Uroscan should be separate folder structure

## v2.1 readme


# ctg+rnaseq pipelie

Pipeline for demultiplexing, qc, alignment and transcript summarization for RNAseq Illumina sequencing data.
The pipeline is designed to handle multiple different RNAseq Assays and Species. Different assays will require differences in read strandness, read trimming etc.     

**Note:** The script can only process samples that are run in one single sequencing run (one Illumina Runfolder). If a project uses multiple sequencing runs, these have top be processed separately.  

**Note** Only **one project** is allowed per demux/pipeline run. The `project_id` (supplied by `Project` in SampleSheet) will owerwrite the `Sample_Project` column in sample sheet - again  (As of v1.3 the `ProjedId` is supplied through the SampleSheet, **not** using -i flag as for version <1.2. Thus, different projects/librarties within a pooled run must be processed separately.  

**Note:** The pipeline is designed for **one and the same** species and Assay etc. If multiple species or differences in Library preparation, then run multiple pipeline runs, i.e. separate sample sheets and separate projects_ids.    



## Installation on ls4
Version specific pipeline folders are deployed to ls4 at: `/projects/fs1/shared/ctg-pipelines/ctg-rnaseq/`

Development versions are found at: `/projects/fs1/shared/ctg-dev/pipelines/ctg-rnaseq/`


**Note:** When running `rnaseq-driver`the entire ctg-rnaseq sctiprs directory with executables and configs are copied to (and run from within) the project folder.

**Note:** Do **not add** the ctg-rnaseq script directories to **$PATH**. Instead run the `rnaseq-primer` script usging full path - thus allowing proper version control, e.g. ``

This version is designed to run on ls4 under `ml nextflow/19.04.1`  



## Running the ctg-rnaseq pipeline
  1. Clone and build the **Singularity container(s)** for this pipeline using **version control tags**.
    - https://github.com/cirrina/singularity-bladderreport
    - https://github.com/cirrina/singularity-ctg-rnaseq
    - https://github.com/cirrina/singularity-uroscan

  2. Add the sif contatiners to lsens path: `/projects/fs1/shared/ctg-containers/rnaseq/`, e.g:
    - `/projects/fs1/shared/ctg-containers/rnaseq/singularity-ctg-rnaseq-1.0.2.sif`
    - `/projects/fs1/shared/ctg-containers/rnaseq/singularity-uroscan-1.0.1.sif`
    - `/projects/fs1/shared/ctg-containers/rnaseq/singularity-bladderreport-1.1.2.sif`

  3. Add the correct .sif paths to the `nextflow.conig`.  

  4. make sure that the `ctg-rnaseq` scriptsdir matches the `scripts_root` in the `rnaseq-driver` script

  5. Edit your samplesheet to fullfill all requirements. See section `SampleSheet` below

  6. Run the `naseq-driver`from *within the Illumina Sequencing Runfolder*. SampleSheet (-s) ,must be supplied and present within the runfolder execution dir.  

  7. OR - Run the `naseq-driver`from *within the Project work folder* generaded by step 6 OR manually. SampleSheet (-s) must be supplied and present within the project dir, and typically, file path to fastq directory.

  8. Optional: Modify parameters in the `nextflow.config.project.XXX` or the `nextflow.config` files. Make sure that the software versions as installed in .sif are compatible with references defined in nextflow.config, e.g. STAR indexed references.



Example initiate from within Illumina runfolder:
```
bash /projects/fs1/shared/ctg-pipelines/ctg-rnaseq/2.0.0/rnaseq-driver \
  -s 2021_024_SampleSheet-IEM.csv
```

... OR re-run a failed run, debug etc within a project folder:
```
rnaseq-driver \
  -s 2021_024_SampleSheet-demux.csv \
  -f nf-output/fastq/2021_024
```

... OR  try to resume a failed nextflow run:
```
rnaseq-driver \
  -s 2021_024_SampleSheet-demux.csv \
  -r
```



## Usage rnaseq-driver
```
usage: rnaseq-driver [ -s samplesheet ] [ -r resume ] [ -f fastq_path ] [ -l force_lane ] [ -i force_index ] [ -h help ]

samplesheet    -s : IEM style laboratory SampleSheet. Project and pipeline specific parameters must be added

optionals:
fastq_path:    -f : Set to a full path where all fastq files are located. individual filenames should be specified in ctg sample sheet. This flag will set 'run_blcl2fastq' to 'false' and all flags related to demux to false
resume         -r : Nextflow-specific. If to resume nextflow run. Can only be used when executing in Project work dir, NOT from Illumina runfolder
force_lane     -l : Set to 1 or 2 if to force demux to only run one lane. This if lane divider is used AND if lane is NOT specified in sample sheet. This parameter will override the Lane column in sample sheet
force_index:   -i : Set this flag if to force iem samplesheet Rscript to overwrite index id and sequence informations based on index well id.
help           -h : print help message

```


## Input
- `--samplesheet`, `-s`:  **Required**. (see `SampleSheet` section below)



## Output:
In short, the pipeline will produce

  1. a project workfolder used during pipeline excecution.

  2. customer delivery folder, contatining all relevant deliverables, including a customer-specific multiqc anlalysis

  3. ctg archive folder containing an extended multiqc analysis together with logfiles, scripts and samplesheets making it possible to replicate the analysis,



1. **Pipeline work folder**  
`project_root`+`project_id` e.g. `/projects/fs1/shared/ctg-projects/rnaseq/2021_070`.  
Temporary work folder - used while pipeline is running. Upon a successful pipeline execution, all deliverables and ctg specific logs and qc metrics should have been copied from this directory, i.e. this folder can be  safely deleted after delivery.

  - `./.nextflow/`. Temporary files used by nextflow pipeline. Will not be archived. Used for debugging faulty runs together with the `/.nextflow.log` and `/nf.log.rnaseq` files.

  - `./bin/` Executables used by pipeline cloned from the `ctg-rnaseq` version specific archive, e.g. `/projects/fs1/shared/ctg-pipelines/ctg-rnaseq/v1.3/bin/`.  

  - `./nf-output/`: Temporary folder to which all analyses are written. Files are moved/copied to delivery and ctg archive folders in the last step of pipelie execution. **All analyses** written to this directory are included when running the `ctg-multiqc`. Not all analyses files are archived though, such as alignmnent files used by fastqscreen analysis.  



2. **Customer delvery folder**  
`delivery_root`+`project_id` e.g. `/projects/fs1/nas-sync/ctg-delivery/rnaseq/2021_070`.  
Primary delivery folder. This is the folder that should be transfered to the delivery server for customer delivery. In a standard pipeline run, no additional files or folders should need to be added.

    - `./fastq/` : bcl2fastq output with fastq files in project id folder (stemming from the project_id column in sample sheet wich is forced to pipeline project id)`./fastq/2021_070` If `pooled, false` (thus a seq run with non pooled data) is specified in sample sheet, then this folder will also incude `./fastq/Undetermined*.fastq` files as well as `./fastq/Reports` and and

    - `./featurecounts/`: transcript summarization matrix, e.g. `2021_070_geneid.featureCounts.txt`

    - `./fastqc/` : fastqc analysis output. One fastqc output per sample and read. e.g. `R09_T1_S22_R1_001_fastqc.html` and `R09_T1_S22_R1_001_fastqc.zip`

    - `./star/` : star alignment output, e.g. `R46_T3_Aligned.sortedByCoord.out.bam` and `R46_T4_Aligned.sortedByCoord.out.bam.csi`

    - `./multiqc/` Lighter version of multiqc for customer delivery (not the same as `ctg-multiqc` that is more extensive). This is basically only run on the contents present in delivery folder (including fastq, fastqc, star and featurecounts, but does not include anlalyses such as fastqscreen, picard, or illumina InterOp)

    - `./md5sum.txt`: md5sum on all files in the customer delivery folder.


3. **CTG archive folder (ctg-qc)**  
`ctg_save_root`+`project_id`, e.g. `/projects/fs1/shared/ctg-qc/rnaseq/2021_070`  
Here pipeline log files, executaables, configs and samplesheets are archived together with relevant QC files, such as ctg-multiqc and fastqc.
  - `./scripts/nextflow.config.project.project_id`
  - `iem.rscript.log`
  - `./multiqc-ctg/`. The multiqc-ctg analysis is run on all sequencing and project specific files and folders, including the Illumina runfolder and full bcl2fastq demultiplexing folder. Thus includes more information than the multiqc sent to customer.  

**Note:** as of v1.0 all relevant files are not yet copied/transfered.




## Detailed Pipeline steps & processes:

### **rnaseq-driver**  

  1. Create **work folder**  
  e.g. `project_root`+`project_id` e.g. `/projects/fs1/shared/ctg-projects/rnaseq/2021_070`  
  Based on the `project_id` flag (-i) and the `project_root` parameter.
  he pipeline executables (e.g. `rnaseq-driver`) and config files and scripts (e.g. `nextflow.config` and `rnaseq-main.nf`) are copied and run from whitin the project directory **not** from their primary location on lsens.

  2. Run Rscript `iem-samplesheet-processor.R`  
  To validate and generate modified SampleSheets for downstream analyses.  
  **Input:**  
  Illumina Experiment Manager (IEM) style SampleSheet *modified to fit CTG LIMS* (see SampleSheet below).  
  **Output:**  
  `SampleSheet-2021_070-demux.csv`: used for bcl2fastq  
  `SampleSheet-2021_070-ctg.csv`: used by the main nextflow script. The rsctipt add Assay specific columns, such as, strandness, paired, and the file names for fastq and bam fils etc.  
  `log.rscript.samplesheet`: logfile with paramaters that are imported by nextflow-primer and passed on to `nextflow.config.project.2021_070` used by the main nextflow script. See `Source` section below for additonal script info.  

  3. rnaseq-driver output:
  nextflow parameters file: `nextflow.config.project.2021_070`.  

  4. rnaseq-driver will initiate:

    - `nohup nextflow run $nf_pipe -c $nf_conf -profile ${profileName} > log.nextflow.progress &`.

    - OR, if --resume `nohup nextflow run $nf_pipe -c $nf_conf -profile ${profileName} --resume > log.nextflow.rnaseq &`

###  rnaseq-main.nf**

#### Input:
The driver (above) will initiate nextflow pipeline `rnaseq-main.nf` with the follwing input:

a.  Two config files:
  - `nextflow.config` and
  - `nextflow.config.project.2021_070`)

b. Two differemt samplesheets
  - `SampleSheet-2021_070-ctg.csv`
  - `SampleSheet-2021_070-demux.csv`.

c. Input parameter ` -profile` that defining
  - rnaseq : standard ctg rnaseq pipeline
  - uroscan : the uroscan pipeline - includes RSEM and genrates bladderreport through Rscript

#### Settings - Configs

**Slurm settings:** are defined for each process in the `rnaseq-main.nf` script.  

**Singularity** container(s) are supplied within the `nextflow.config` sripts.  


#### Demultiplexing & check .fastq file output
bcl2fastq: Converts raw basecalls to fastq, and demultiplex samples based on index (https://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/bcl2fastq/bcl2fastq2-v2-20-software-guide-15051736-03.pdf).  

```
bcl2fastq -R ${runfolderdir} \\
          --sample-sheet ${samplesheet_demux} \\
          --no-lane-splitting  \\
          -r 1 \\
          -p ${task.cpus}  \\
          -w 1  \\
          --output-dir ${fastqdir_bcl2fastq}
```  
Check if all expected fastq files have been generated by bcl2fastq and present in the expected location. The fastq names have been hardcoded into the ctg sample sheet (`SampleSheet-2021_070-ctg.csv`) in columns `fastq_1`and `fastq_2` by the `iem-samplesheet-processor.R` rscript.  


#### STAR & check .bam output
STAR alignment. https://github.com/alexdobin/STAR/releases.  

```
STAR --genomeDir ${genome} \\
  --readFilesIn ${starfiles} \\
  --runThreadN ${task.cpus}  \\
  --readFilesCommand zcat \\
  --outSAMtype BAM SortedByCoordinate \\
  --limitBAMsortRAM 10000000000 \\
  --outFileNamePrefix ${stardir}/${sid}_
```
.bam files from STAR are cross checked - all .bam files given in sample sheet must have been generated by STAR.

#### Picard rnaseqmetrics
```
java -jar /usr/local/bin/picard.jar CollectRnaSeqMetrics \\
  INPUT=${stardir}/${bam} \\
  OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\
  REF_FLAT=${refflat} \\
  STRAND=${strand} \\
  RIBOSOMAL_INTERVALS=${rrna}
```

#### featurecounts
```
featureCounts -T ${task.cpus} \\
  -t ${params.fcounts_feature} \\
  --extraAttributes gene_name,gene_type \\
  -a ${gtf} -g gene_id  \\
  -o ${featurecountsdir}/${projectid}_geneid.featureCounts.txt \\
  -p \\
  -s ${strand_numeric} \${bamstring}
```


#### samtools index bam files
```
samtools index -bc ${stardir}/${bam}
```

#### picard markdups
```
java -jar /usr/local/bin/picard.jar MarkDuplicates \\
  INPUT=${stardir}/${bam} \\
  OUTPUT=${markdupsdir}/${bam} \\
  METRICS_FILE=${markdupsqcdir}/${sid}_bam.MarkDuplicates.metrics.txt \\
  TAGGING_POLICY=All \\
  REMOVE_DUPLICATES=false \\
  ASSUME_SORTED=true \\
  MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=2000 \\
  QUIET=true \\
  VERBOSITY=WARNING
```
markdups will replace .bam files generated by STAR
```
mv -f ${markdupsdir}/${bam} ${stardir}/${bam}
```

#### fastqscreen

`params.fastqscreen_config` includes mycoplasma.

```
/usr/local/bin/FastQ-Screen-0.14.1/fastq_screen \\
  --conf ${params.fastqscreen_config} \\
  --subset 500000 \\
  --outdir ${fastqscreendir} \\
  ${fqsfiles}

```


#### FastQC
FastQC calculates quality metrics on raw sequencing reads (https://www.bioinformatics.babraham.ac.uk/projects/fastqc/). MultiQC summarizes FastQC reports into one document (https://multiqc.info/).  
```
fastqc ${fastqdir}/${read1}  --outdir ${fastqcdir}
```

#### multiQC ctg
Compile a multiqc report of (https://multiqc.info/)  
- multiqc-ctg
- mutiqc.

```
multiqc -n ${projectid}_multiqc_report \\
  --interactive \\
  -o ${multiqcctgdir} . ${runfolderdir}
```

#### setup delivery & ctg archive
copy and/or move all files to delivery and archive.


#### multiqc deliverydir

```
multiqc -n ${mqcreport} \\
  --interactive \\
  -o ${multiqcdeliverydir} .
```

#### md5sum
md5sum of all files produced in the delivery folder.
```
cd ${deliverytemp}
find . -type f -exec md5sum {} \\; > ${md5sumfile} ; echo
```


## Samplesheet requirements:
Should be in the format of Illumina IEM sample sheet.  
https://support.illumina.com/sequencing/sequencing_software/experiment_manager/downloads.html  

The **Bold** fields below must be correctly specified!  
**Note on [Header] `Species` and `Pooled`:** These `[Header]` variables are not included by IEM and **must be added**.  
**Note on [Data] Sample_ID:** : Olny Sample_ID values are required. **Sample_Name** will be forced to the same value as Sample_ID. This to force the file structure output from bcl2fastq demux to be consistant. Sample_ID ≠ Sample_Name will produce additioonal folder structure.    
**Note [Data] Sample_Project:** This column will be force overwritten by the `iem-samplesheet-processor.R` script to the same project id value as defined when executing the pipeline.  

**Note on [Header] Instrument Type:**  Can be NovaSeq or NovaSeq1.0 protocol.  
**Note on [Header] Assay:**  Allowed Assay values are listed in `./bin/checklist-iem.csv`. Assays are specified using same nomenclature as within the IEM software.  
**Note on [Header] Index Adapters:**  Allowed Index Adapters values (and Assay combinations) are listed in `./bin/checklist-iem.csv`. Specified using same nomenclature as within the IEM software.    
**Note on [Settings] Adapter:**  Adapters will be cross-checked using the`./bin/checklist-iem.csv` file. The Adapter value must match the value specified under respective Index Adapter.
**Note on [Reads]:** This section is used to determine if the run is **paired or not**. Note that the actual read lenths are **probably** not used by bcl2fastq, pooling of different Assay types may complicate thisgs,

----
[Header]  
**Pipeline**, ctg-rnaseq v1.3,
**Project**, 2021_053,
IEMFileVersion,5  
Investigator Name,X  
Experiment Name,X  
Date,YYYY-MM-DD  
Workflow,GenerateFASTQ  
Application,NovaSeq FASTQ Only  
**Instrument Type**,*NovaSeq*
**Assay**,*TruSeq Stranded mRNA*  
**Index Adapters**,*IDT-ILMN TruSeq RNA UD Indexes (96 Indexes)*  
Chemistry,Amplicon  
**Species**,*Homo sapiens*   
**Pooled**,*true*

[Reads]  
*101*    
*101*

[Settings]  
**Adapter**,*CTGTCTCTTATACACATCT*  

[Data]  
**Sample_ID**,Sample_Name,Sample_Plate,Sample_Well,**Index_Plate_Well**,**I7_Index_ID**,**index,I5_Index_ID**,**index2**,Sample_Project,Description  
*R41_C*,,CTGpl_073,A01,*A01*,*UDI0001*,*CCGCGGTT*,*UDI0001*,*CTAGCGCT*,2021_070,CTGpool_0158  
*R41_T1*,,CTGpl_073,B01,*B01*,*UDI0002*,*TTATAACC*,*UDI0002*,*TCGATATC*,2021_070,CTGpool_0158  

----

## Source files

### ./bin folder
The `./bin/` contains executables used by the pipeline, The bin directory is cloned into the project work directory and files are accessed locally from within there.

#### **`iem-samplesheet-processor.R`**  
This script validate sample sheet, and to generate modified SampleSheets for downstream analyses.

  **Input:**  
  Illumina Experiment Manager (IEM) style SampleSheet *modified to fit CTG LIMS* (see SampleSheet below).  

  **Output:**  
  - `SampleSheet-2021_070-demux.csv`.  
  - `SampleSheet-2021_070-ctg.csv`  
  - `iem.rscript.log`: The logfile is used by `rnaseq-primer` to generate parameters file `nextflow.config.project.2021_070` used for the main nextflow sctipt.  

  The Rscript will:
  - check basic integrity of the IEM samplesheet
  - check that required columns are present and correctly specified. This is done using the `./bin/checklist-iem.csv` file. A given Assay/Index Adapters combionation will have specific requirements, e.g. Read2StartFromCycle or Adapter, all specified in the `checklist-iem.csv` source file.
  - check for illegal sample namimings and duplicated sample names
  - Replace illegal characters.
  - cross check index nmames and sequences against the `./bin/checklist-index.csv` file.
  - add fastq and bam file namings according to fixed nomenclature. These are used by `rnaseqw-main.nf` to check if all expected files have been generated.  

  Options/flags:
  - fastq and bam sample name suffixes
  - Column settings are cross checked against database
  - `force_index`: Indexes are cross-checked and force-replaced if needed
  - `force_lane`: force lane to 1 or 2, if e.g. lane divider has been used. This will force a  `Lane` column in [Data] sample matrix seciton.  

  ```
  $singcmd ${projectdir}/bin/iem-samplesheet-processor.R \
        --project_id ${projectid} \
        --sample_sheet ${samplesheet} \
        --output_demux_sheet ${samplesheet_demux}  \
        --output_ctg_sheet ${samplesheet_ctg} \
        --bin_dir "${projectdir}/bin/" \
        --force_lane ${force_lane} \
        --force_index ${force_index}
  ```


#### **`/bin/checklist-iem.csv`**  
Used by the `iem-samplesheet-processor` rscript to cross check allowed values and value combinations given in the sample sheet, for example check that the Assay value is allowed, or that Species value is properly specified. Also, conditional rules can here be defined, such as requiring that one paricular Assay must also have Read2StartFromCycle a particular [Settings] defined.

The following columns are expected and are used to define what rules the rscript will use to cross check sample sheet:  
- iem_section
- parameter
- conditional_parameter
- conditional_value
- value
- Comment

Thus, the lines containing `iem_section` *[Header]* and `parameter` *Assay*, such as:  
`[Header],Assay,,,TruSeq Stranded mRNA,TruSeq Stranded mRNA Sample Preparation Guide (Part 15031047 Rev. E) Modification of Enrich DNA Fragment step:from 15 to 13 PCR cycles`
will be used to cross check that the *[Header]* `iem_section` contains one value (row) that specify `Assay` and that the specified value, `value`-column, is mathichg one of the specified, e.g. `TruSeq Stranded mRNA`

Conditions can be added using the `conditional_parameter` and `conditional_value` columns.  
Such as the line:
`[Settings],Read2StartFromCycle,Assay,SMARTer Stranded Total RNA-Seq Kit v2 Pico Input Mammalian,4,`   
will be interpreted as:
IF the `conditional_parameter` *Assay* matches the conditional value `SMARTer Stranded Total RNA-Seq Kit v2 Pico Input Mammalian`, the script will require that the `Read2StartFromCycle` parameter is given under `iem_section` *[Settings]* AND that it matches the `value` of *4*.  

#### **`/bin/checklist-index.csv`**  
Used by the `iem-samplesheet-processor` rscript to check that index id and well postions correspond to the sequence given in the samplesheet.  
csv-delimited file
Note that default NovaSeq Instrument type (specified as *Novaseq*) is the NovaSeq1.5 chemistry.  
The following columns are expected:
- Index_Adapters // Adapter kit, e.g. *IDT-Ilmn RNA UD Indexes SetA Ligation*
- product.no // product number, e.g. *20040553*
- Instrument_Type // Novaeq (default) or NovaSeq1.0. The 1.0 chemistry I5 indexes are reverese complement to I7.
- Index_Plate_Well //
- I7_Index_ID
- index
- I5_Index_ID
- index2


#### **`/bin/checkfiles_pipeline.R`**  
Used to check if expected files are present in a directory or not. The script will RECURSIVELY check if files are present in a parent directory or not. So a 'PASS' will indicate if *ALL* expected files, present in sample sheet, are found in any directory, though, all files have to be present in the same directory and not spread out. The script is intended to be run on:
1) ctg archive dir 2) customer delivery dir and 3) work dir.

**input:**  
sample_sheet-ctg with required columns with file names in columns **fastq_1**, **fastq_2** (if PAIRED), and **bam**.
**output**  
log.file in csv format: `log.rscript.filecheck.csv`  

Example:  
```
./bin/samplecheck.R \\
  --sample_sheet ${samplesheet_ctg} \\
  --project_id ${projectid} \\
  --check_dir ${ctg_save_dir}
  --output ${ctg_save_dir}/log.rscript.filecheck.csv

```


## Important Folders & Variables that are hard-coded (should be moved to .config)
+ `rnaseq-primer` shell sctipt
  + `scriptsdir` : Must match the script file name (version folder)
  + `project_root` : Location where project work folders are generated. This folder is intermittant and used only for analyses. Important files (delivery and ctg save) will be moved from this folder. This foldeer should be safe to delete upon a successful run. (Default location in wich delivery folder will be created default '/projects/fs1/shared/ctg-projects/rnaseq')
  + `delivery_root` : Location where delivery folder will be created '/projects/fs1/nas-sync/ctg-delivery/rnaseq'
  + `ctg_save_root` : Location where files to be archived by ctg will be saved  qc saved for ctg will be created
  + `projectdir` : generate project dir from input -i `project_id` parameter and `project_root`



### Container  
https://github.com/cirrina/ctg-singularity/tree/main/rnaseq/v1.1  



== ctg-rnaseq v1.3
Main objective - integrate primer and driver. Add resumue and no-demux functionablility


=== Known Issues
- custom fastq folders is not able to define, As is you must use structrure obtained when running bcl2fastq. Thus: `"${projectdir}/nf-output/fastq/${projectid}"`

- option to skip STAR alignment. is there one>

- param.run_align seem useless as is.



### ctg-rnaseq v3.0.0 -- changes in structure
Main change in strategy to adapt to Pers pipelines.
* change delivery root to `shared/ctg-delivery`
* The project work folder will be the main source of script backup (as compared to the current ctg-qc folder)
* Output files to be delivered to customer should be put immediately into the delivery foler.
* Clean the bin directory - remove unnecessary files.


1. fastq files. Default is now to obtain fastq-files from the demux output path. `shared/bcl2fastq-output-fastq`. Check at this location. If there, then prepare to move fastq files to `delivery/projid/fastq`. If no there, use the `-f` flag to define


2. change driver. A new driver strategy should be to move the  `rnaseq-driver.sh` to `\ctg-tools`. This driver shoud be a **light**. The main function is to be a wrapper that identifies the correct script version, create a project dir (if needed) and executes the pipeline. **Q!** Should project scripts be overwritten or NOT?.

	* input SampleSheet. Should contain ALL relevant params (exept for -p prime and -r resume, and -f fastq)
	* identify the version to be run
	* Create the project dir and copy all relevant files to there
	* execute `rnaseq-main.sh` scritp that in much crresponds to the old `rnaseq-driver.sh`




#### Script structure:

!! NOTE: Directories are named after projectId. ProjectId are always defined within the SampleSheet. Project workfolder must be named exaly as the
If you want to change name of a project - make sure to change in the samplesheet (note, the script will in this case not check Sample_Project column in samplesheet, only projectId in [Header] section).

After initiation,
Fastq and

!! NOTE the script is desiged to genereate an ouput (delivery) folder to beprepared for customer delivery. Therfore, if custom fastq file dir is provided, fastq files are MOVED to  the delivery dir. E.g., the default run will provide fastq files in a dir generated by bcl2fastq. This ENTIRE FOLDER will be MOVED to the auto-generated fastq file location


 #### rnaseq-driver.sh:
 Primary aim.
 start the rnaseq-pipeline with SPECIFIED VERSION


Shuld be able to run FROM
1) location


MOVE FASTQ FILES?




#### Script initiation


#### rnaseq-driver.sh -- should be insensitive to changes in version. should be made available to run from within global env

The rnaseq-primer sctipt will expect
  -f fastq flag
  -p flag


The rnaseq-primer script will determine the mode of execution. This will be passed on to the rnasq_main.sh script
a.
  project_setup_mode = true (default = true)

 (most often initiated from RunFolder...) Iniitated after bcl2fastq has generated fastq files & put these in defaults fastq location.
  - Do not have to be initiated from within runfolder
  - All scripts and folders should be default overweritten , Configs & Scripts
  - WARN if project folder already exist
  - Create project workfolder. Copy scripts

b. Like a. BUT PRIMING, -p flag.

  priming_mode = true (default = false)
  STOP after project dir has been setup.
  This to allow changing of parameters etc.


c. Project folder. Defualt location IF re-run etc
  set: project_setup_mode = false

  WHEN initiated from within project folder.
  Expect:
    {execution_dir} to be same as {projectId}

  IF project_setup_mode = false -> JUMP DIRECTLY TO THE rnasq_main script



TASKS
1. CHECKInput args.
  samlesheet (and if IEM style)
  fastq dir if -f flag check this. SET custom_fatsq to false

  if -p flag --> set prime_projectfolder_mode = true

2. Read params from samplesheet [Header]
    - projectId
    - pipelineName = PipelineName
    - pipelineProfile = PipelineProfile
    - pipelineVersion = PipelineVersion

3. Genrate file paths:
  - project_dir:  project_root + PipelineName + PipelineProfile + ProjectId
  - delivery_dir: delivery_root + PipelineName + PipelineProfile + ProjectId
  - scripts_dir="${scripts_root}/${pipelineName}/${pipelineVersion}"

4. Decide if executed in project dir or not
    project_setup_mode = true OR false
 IF projectfolder_setup_mode ->
  mkdir project_workfolder (prevoiusly runfolder_mode)
  Copy sampleheet to project folder.

5.


MOVE to /delivery_root/




#### rnasq_main.sh
The rnasq_main.sh sctipt is initated by the rnaseq-driver.sh script. Parameters will be passed on from inpt in rnaseq-driver.sh
-f ()

-
-

Does NOT need -p flag. Script should have stopped before this.

TASKS
1. Genrate file paths  (many identical to rnaseq driver)

2. Generate project specific configs.
  IF projectfolder_setup_mode = true -- OVERWRITE
  IF CONFIGS EXIST && project_setup_mode = false - DO NOT OVERWRITE!!!

3. IF prime_project STOP HERE

1. Move & check fastq



#### Configs
nextflow.config
nextflow.config.samplesheet_{projectID}: Parameters inferred directly (and indirectly) from samplesheet.
nextflow.config.run_modules: What modules to run. Default decided from what PilelineProfile taht has been set.



#### rnaseq-driver.sh -- should be moved to ctg-tools

1/ Runfolder mode (runfolder_mode = true)
 generate project folder
 overwerites everything in project folder if exists (warns if exists)

check if initiated in a runfolder

2. Project folder mode (runfolder_mode = false)
Require samplesheet must be same requirements as for 1. get project id from here and check pipeline parameter

 2.a . resume - false -
 2.a.1 skip demux  = false


 2.a.2 skip demcux = true

 2.b . resume - true -
 check that all expected files are present - including nf log files
 initiate nextflow with resume flag


RESUME MODE - THEN NO OTHER AHTN


`scripts_root`: <br/>Defines root directory where the different versions of scripts are stored. The version to be run is specified in the samplesheet. So, if the `scripts_root` is `/projects/fs1/shared/ctg-dev/pipelines` and SampleSheet `pipelineName` is `ctg-rnaseq` and `pipelineVersion` is `2.1.7`, the script will start pipeline dir `/projects/fs1/shared/ctg-dev/pipelines/ctg-rnaseq/2.1.7`

`rnaseq_script`: Name of shell sctipt that will initaiate an rnaseq run & nextflow scripts
`nf_script`: Name of nextflow script


SampleSheet
- PipelineName
- PipelineVersion
- PipelineProfile
- ProjectId


samplesheet_ctg - prviusly short version (nfcore style)

bcl2fastq_dir no longer used. Instead

fastq_input_dir (custom_fastq is true) IF NOT defaults to fastq_output_dir
fastq_output_dir

if NO fastq_input dir


?? Use option 'fastqNoDeliver' if not???

check files default .. 





### Quickstart guide v2.x


1. The driver assumes that FASTQ files have been generated and that filenames are supplied in SampleSheet. This will correspond to output from `ctg-demux2` script (python CTG_SampleSheet crunching followed by bcl2fastq demux). 
4. Edit your samplesheet to fullfill all requirements. See section `SampleSheet`. A SampleSheet must be supplied and present within the pipeline execution dir.  
5. Note that **.fastq** and **.bam** file names must be **defined in the SampleSheet**. FASTQ files are ALL expected to be supplied in the SAME directory. SampleSheet provides filename(s) and -f argument provides FASTQ path.
6. Run the `rnaseq-driver.sh` from `Illumina Sequencing Runfolder` (if first time & no project dir has been created)
7. **OR** run the `naseq-driver`from within the `Project work folder`. This requires that path to fastq directory is specified (`-f` flag). Typically this is performed when resuming a failed run or changing a projects paramters using the config files.
8. Optional: A project runfolder can be primed without starting the nextflow pipeline. Use the `-p`, *prime run* flag. This in order to modify parameters in the `nextflow.config.project.XXX` or the `nextflow.config` files.


Example initiate from within Illumina runfolder (v2.1.x).:

```
/projects/fs1/shared/ctg-pipelines/ctg-rnaseq/2.0.0/rnaseq-driver.sh \
  -s 2021_024_SampleSheet-IEM.csv
```

Re-run a failed run. Done from within the project folder. Filepath to fastq diectory is needed :

```
rnaseq-driver.sh \
  -s 2021_024_SampleSheet-demux.csv \
  -f nf-output/fastq/2021_024
```
Prime a work folder (but do not start a run)

```
/projects/fs1/shared/ctg-pipelines/ctg-rnaseq/2.0.0/rnaseq-driver.sh \
  -s 2021_024_SampleSheet-IEM.csv -p true
```

Resume a failed nextflow run:

```
rnaseq-driver.sh \
  -s 2021_024_SampleSheet-demux.csv \
  -r
```
The `project_id` (supplied by `ProjectId` in SampleSheet) will owerwrite the `Sample_Project` column in sample sheet - again  (As of v1.3 the `ProjedId` is supplied through the SampleSheet, **not** using -i flag as for versions 2.x. Thus, different projects (& library pools) within a pooled run must be processed separately.  


**Note on RunFolder(s):** Versions ≤2.x. are designed to process samples in **one single sequencing run** (all run within one Illumina Runfolder). If a project uses multiple sequencing runs, manual adjustments have to be made to fit the pipeline execution requirements (see below).  




## ctg-rnaseq v1.2


### Changes in v1.2
√ added `-original.csv` sample sheet to projct work folder (by `rnaseq-primer`) and to ctg archive (nf main script). This is just a clone of the input sample sheet.

√ Included `Pipeline` requirement in sample sheet.

√ updated to `iem-samplesheet-processor.R v1.1`. For changes, see below.

√ updated to `checklist-iem.csv v1.1`. Fixed an issue with illegal character.

√ changed namings of `nextflow.params.` file to `nextflow.config.project.`

√ changed namings of `iem.rscript.log` file to `log.rscript.samplesheet`

√ **Major:**  Changed so that project_id now is supplied through SampleSheet rather than -i flag in primer script.

√ **Major:** added checkfiles rscript. So far this script will only check files and print to log. No actions are taken.


=== List of new Issues

- Maybe includ a check for if the deliverydir exists. The deliverydir is 'created' by moving the temp delivery folder from the project work folder. Since qc is performed on the deliverytemp, and since this is the filnal step. the delivery dir must not exist and be overwritten.
Fix: add an early check for if the deliverydir exists in primer, if so stop and flag.

√ added -d flag `skip_demux` to `rnaseq-primer`. This will replace run_demux to instead flag to skip demux. If skipping demux, all fastq filenames in samplesheet must be found in the project specific fastq work folder. NOT WORKING. Has to be added to driver ... Fix when driver and primer is same.

- params.custom
If this file is available in runfolder - then use this file rather than the params.default file in ./versio dir

- Main update: Merge the primer and driver scripts - only one script should be run

The `scriptsdir` parameter is not optimal. Try setting this parameter to match the actual execution command version. See e.g. https://stackoverflow.com/questions/192319/how-do-i-know-the-script-file-name-in-a-bash-script
-

* Merge all parameters into one parameter file , i.e move parameters from shell script to nextflow.comfig. Read these parameters in shell script usong grep/sed ...
  Also move the [ -l force_lane ] [ -l force_index ] flags into config OR sample sheet

* Proper LOGs. Crete ./logs directory. Make sure that nextflow logs are moved here.

* nextflow config. make sure to copy the nextflow log within the work project foldee - this may have been modified!

* Check so that analysis output from fastqscreen are archived.

* add project id to header instead of -i flag

-  Should Lane should then be incliuded into fastq naming nomenclature? NO - not when running --no lane splitting as default



=== Knowm Issues inherited from previous versions
- Picard RnaSeqMetrics. does not support rRNA intervals file for Rattus norvegicus. Error.


=== update to iem-samplesheet-processor.R v1.1
√ small fixes

√ added `checklist_flags$multiple_lanes` if >1 Lanes in sample sheet

√ Updated so that duplicate indexes are checked *within* Lane, i.e. duplicated indexes are allowed between different lanes.




== v1.01 to-d0
- add versionto log - at least what command whas run

- nexflow log file
save the final nextflow log =, e.g. 2021_076.nextflow.log.complete to the ctg save (ctg-qc) directory

- Picard RnaSeqMetrics. does not support rRNA intervals file for Rattus norvegicus. Error.

- remove legacy rnaseq primer/driver etc from ctg-drivers. These are now included in project script.

- add the ctg-interop foldder to ctg-multiQC run. dont think it is....? OR Maybe, fix so that interop/runfolder is run in ctg-multiqc also for pooled runs,

- add parameter-controlled text sections for Propject Delivery. References should here be changed according to assay, and correct parameters should be reflected?

- Rscript. force replace '-' to _ (instead of nothing '' as is now?)

- samplesheet original. not in ctg-save folder
ALSO
- sample sheet - keep unaltered name?

- add proper support for resume pipeline. both nextflow resume and resume without --resume

+ BUG- finalize delivery - if deliverydir already exists - then delivery is moved wronlgy to ctg delivery
  maybe has to do with mv ${deliverytemp} ${deliverydir} ---- mv ${deliverytemp}/ ${deliverydir}
  ADD CHECK when starting script. delivery dir must not exist.

- remove the STARtmp folders ('projectid_STARtmp') from star folder prior delivery

- after md5recursive on delivery dir, remove the line for 'md5sum.txt' in the md5sum.txt file.

- add user_id (customer) to sample sheet and process by the R script.


ONE execution with proper resume - that is a check for files before each step.


== v1.0
=== v1.0 deploy on lsens
2021 06 21


=== v1.0 to-do
-

== v1.0 addressed
√ Added 'Rattus norvegicus' references to ls4
√ Added 'Rattus norvegicus' species file paths in nextflow.config

file(ctg_save_dir).mkdir()


### Knowm Bugs  v1.0
FeatureCounts not functioning for ratus norvegicus


Project id cannot have dots '.'. For example, Bcl2fastq removes dot i project folder and pipe will crash.
    - Include a exit abnormal if $projectid includes a dot.



## Add new species
References - 4 different.

should be added nto multiple locations
checklist-iem.csv
nextflow.config. Reference file paths.
main script processes: STAR, featurecounts (gtf) and rnaseqmetrics (refflat and )



## Known issues

- Should add checks for multiple prpcesses that they do not run if expected files are present. This featuer should not clash with the resume of nextflow. i.e. if resume is true, folders/.files may exist but not comlpete. this check must therefore be done on complete expected output. May be lesss of a problem with running e.g. multiqc etc
Possible sollution is resume mode that would turn all initial flags to true.
One other solutione is to add "start_from" flags. to use when -resume is needed  but not working.
- nf run flags. as of now fiddeling with true & false parameters can be done. nf should log all paramaters somehow.


- 1. -resume flag.
- 2. -if no resume set to FALSE if dir/file does not exist
- 3. optional flags. module process flags. Could be set by modes. (mode full, mode algn, mode mininal)

Delivery mode:
alignment or NOT aligned data.


deliverydir

/data
/qc
perform only md5sum on the data folder




OTHER stuff
´´delivery on lfs. deliver per PROJECT rather than customer/user


# ctg-rnaseq

This pipeline will process RNA seq sequencing data from Illumina raw data runfolders.

A typical run is executed through two bash scripts in sequential order.

1) 'rnaseq-primer':
his script will prepare an analysis for the 'rnaseq-driver' script. It will further retrieve the nextflow sctipts directory that include the main nf script 'ctg-rnaseq' as well as the 'nextflow.con fig' and /bin directory that contain script files such as the 'iem-sampleseet-processor.R'. This Rscript cross-checks the inputed IEM style samplesheet and generates two sample sheets (demux and plain) that are in correct format. Finally, the primer will create a project specific nextflow configuration file that carry project-specific paramaters of the project ('nextflow.params.<project_id>'). This will be the primary file for changing nextflow parameters.

This script shoud ideally be initiated within the Illumina runfolder, bu can also be initiated in a folder with the same name as set by the -i parameter (e.g. if the script is re-run with modified samplesheet or if no demux shall be performed)


2) 'rnaesq-driver'
This script will run the ctg-rnaseq nextflow workflow. It uses samplesheets generated by the rnaseq-primer. The script also uses the nextflow parameter file 'nextflow.params.<project_id>' generated by the primer.

This script must be initiated in the project directory (same project directory as set by the -i flag).




## Specification of individual scripts





Input for rnaseq-primer sctipt is.
a) project id. (-i)
a) Sample sheet (-s)


### rnaseq-primer

- Script location:
  /projects/fs1/shared/ctg-drivers

- Initiation:
  Preferrably withinIllumina runfolder but can also be initiated in the exact project directory that should be run. e.g. '/projects/fs1/shared/ctg-projects/ctg-rnaseq/2021_044'

- Usage:
  -i, projectid, e.g. '2021_044'
  -s, samplesheet. Should be in IEM format and preferably generated by Illumina IEM software.

  -l, force_lane (optional): Set to 1 or 2 if to force demux to only run one lane. This if lane divider is used AND if lane is NOT specified in sample sheet. This parameter will override the Lane column in sample sheet"
  -f, force_replace_index (optional): Set this flag if to force iem samplesheet Rscript to overwrite index id and sequence informations based on index well id. The script uses '/ctg-rnaseq/workflow/bin/checklist-index.csv' to cross-check indexes.

- Script details.

This script will prepare rnaseq analysis pipeline by:

  a) setting up a project folder and copy nextflow ctg-rnaseq sctripts from 'ctg-pipelines/ctg-rnaseq/workflow/' folder.
  b) run 'ien-sampleseet-processor.R' Rscript and generate two sample sheets.
  c) generate project specific parameters file, 'nextflow.params.<project_id>'.



### iem-sampleseet-processor.R


  i)   check the format of the input IEM style sample sheet
  ii)  replace illegal characters (this section could be refined/expanded)
  iii) check indexes against a database of valid indexes. Sample sheet [Header] must specify 'Index Adapters' and 'Instrument Type', e.g. NovaSeq or NovaSeq1.0 to get the correct index pairs.
  iv)  check adapters and additional trimming. Sample sheet [Header] must specify 'Index Adapters' and 'Assay'
  v)   generate a bcl2fastq demux sample sheet (default name: 'SampleSheet-<project_id>-demux.csv').
  vi)  generate plain sample sheet (default name: 'SampleSheet-<project_id>-ctg.csv').
    This sample sheet carries information of the project, in paticular fastq and bam file names that are checked used in the downstream nextflow script.
  iv)



### rnaseq-driver

- Script location:
  /projects/fs1/shared/ctg-drivers

- Initiation:
    Within the exact directory as project id that should be run. e.g. '/projects/fs1/shared/ctg-projects/ctg=rnaseq/2021_044/
    This directory is usially created when running the 'rnaseq-primer' script

- Usage:
  -i projectid, e.g. '2021_044'
  -r resume

- Required files:
  - 'SampleSheet-<project_id>-ctg.csv', e.g. SampleSheet-2021_044_test-ctg.cs. Sample sheet generated by the primer script. Plain sample sheet used by e.g. fastqc, star etc.
  - 'SampleSheet-<project_id>-demux.csv', e.g. SampleSheet-2021_044_test-demux.cs. Sample sheet generated by the primer script. Used for bcl2fastq demux.
  - 'nextflow.params.<project_id>'. Nextflow parameters file. Used when initating the main nextflow sctipt.






### iem-sampleseet-processor.R
i)   check the format of the input IEM style sample sheet
ii)  replace illegal characters (this section could be refined/expanded)
iii) check indexes against a database of valid indexes. Sample sheet [Header] must specify 'Index Adapters' and 'Instrument Type', e.g. NovaSeq or NovaSeq1.0 to get the correct index pairs.
iv)  check adapters and additional trimming. Sample sheet [Header] must specify 'Index Adapters' and 'Assay'
iv)  generate a bcl2fastq demux sample sheet (default name: 'SampleSheet-<project_id>-demux.csv').
iv)



- Input files
    -

The ctg-rnaseq pipeline is




## TESTS
Test Lanes demux. How does no-lane splitting work (). e.g. 2021_030.



## Questions
+ Chmods of generated files and fodlers !! should be full access by all within the lsens4 group. Add chmods to script? What about executables...
+ Log files should first be generated in project dir. Then on completeion moved? Or always genarated elsewhere?


## Random Comments to script


## Log files



## Processes for bcl2fastq

When threading is supported,the software uses the follow defaults to manage threads for processing: u Fourth reads for reading thedata.
u Fourth reads for writing thedata.
u Twenty percent of threads for demultiplexing data.
u One hundred percent of threads for processing demultiplexed data.

The file io threads aretypicallyinactiveandconsumeminimalprocessingtime.Processingdemultiplexeddataisallocatedonethreadpercentralprocessingunit(CPU)topreventidleCPUs,resultinginmorethreadsthanCPUsbydefault.ConsiderationsforMultipleThreadsWhenusingprocessingoptionstoassignmultiplethreads,considerthefollowinginformation:uThemostdemandingstepistheprocessingstep(-poption).Assignthisstepthemostthreads.uThereadingandwritingstagesaresimpleanddonotneedmanythreads.Thisconsiderationisimportantforalocalharddrive.Toomanythreadscausetoomanyparallelread
-writeactionsandsuboptimalperformance.uUseonethreadperCPUcoreplussomeextra.ThismethodpreventsCPUsfrombeingidleduetoathreadbeingblockedwhilewaitingforanotherthread.uThenumberofthreadsdependsonthedata.Ifyouspecifymorewritingthreadsthansamples,theextrathreadsdonoworkbutcosttimeduetocontextswitching




bam_rnaseqmetrics_ch
rnaseqmetrics_ch ... x


bam_indexbam_ch
indexbam_ch

bam_checkbam_ch
checkbam_ch

bam_markdups_ch
markdups_ch



bam_index_complete_ch
markdups_complete_ch
rnaseqmetrics_complete_ch

bam_featurecounts_ch



if [ "${species}" == "Homo sapiens" ]
then
  gtf=${params.gtf_hs}
elif [ "${species}" == "Mus musculus" ]
then
  gtf=${params.gtf_mm}
else
  echo "Warning: featurecounts, Species not recognized. ${species}"
fi



featurecountsdir = outputdir+'/featurecounts'
stardir = outputdir+'/star'
fastqcdir = outputdir+'/fastqc'
markdupsqcdir = outputdir+'/markdups'
rnaseqmetricsdir = outputdir+'/rnaseqmetrics'

fastqdir

pooled
runfolderdir

markdupsdir = outputdir+'/markdups_bam_tmp'




### OLD ST

# Set Species

if [ "${species}" == "Homo sapiens" ]
then
  echo $species
  genome=${params.star_genome_hs}
elif [ "${species}" == "Mus musculus" ]
then
  genome=${params.star_genome_mm}
else
  echo "Warning: Species not recognized. ${species}"
fi



// sample info from the ctg sample sheet
// samplesheet_ctg = outputdir+'/'+samplesheet_ctg
// Channel
//     .fromPath(samplesheet_ctg)
//     .splitCsv(header:true)
//     .map { row -> tuple( row.Sample_ID ) }
//     .unique()
//     .tap{ infoSamples }
//     .into{ fastqc_ch; star_ch }
//
// infoSamples.subscribe{ println "Samples: $it" }

// sheet_ctg_ch
//   .println { "File: ${it.name} => ${it.text}" }
//   .splitCsv

## log_root='/Users/david/tasks/rnaseq_test/nftest/logs' # logfolder='/Users/david/tasks/rnaseq/rnaseq_test/logs'


#  if [ "${species}" == "Homo sapiens" ]; then
#    refflat=${params.picard_refflat_hs}
#    rrna=${params.picard_rrna_hs}
#  elif [ "${species}" == "Mus musculus" ]; then
#    refflat=${params.picard_refflat_mm}
#    rrna=${params.picard_rrna_mm}
#  else
#    echo "Warning: rnaseqmetrics, Species not recognized"
#    refflat="APAs"
#    rrna="nbajsss"
#  fi


// Define SLURM specs
// process {
//   executor='slurm'
//   container = 'singularity/rnaSeqTools/rnaseqtools.dl.0.1.sif'
//   time='3h'
//   cpus='4'
// //
// //   withName:mkfastq {
// //     time='24h'
// //     cpus='16'
// //     memory='110 GB'
// //   }
// //   withName:count {
// //     time='2d'
// //     cpus='20'
// //     memory='120 GB'
// //   }
// //   withName:count_nuc {
// //     time='2d'
// //     cpus='20'
// //     memory='120 GB'
// //   }
// //   withName:aggregate {
// //     time='2d'
// //     cpus='16'
// //     memory='120 GB'
// //
// //   }
//  }


Caused by:
  Process `bcl2fastq (null)` terminated with an error exit status (127)

Command executed:

  bcl2fastq -R /projects/fs1/nas-sync/upload/210510_A00681_0363_BH3MN5DRXY \
           --sample-sheet /projects/fs1/shared/ctg-projects/ctg-rnaseq/2021_044_test/SampleSheet-2021_044_test-demux.csv \
           --no-lane-splitting  \
           -r 1 \
           -p 4  \
           -w 1  \
           --output-dir /projects/fs1/shared/ctg-projects/ctg-rnaseq/2021_044_test/fastq/2021_044_test


           cd $run
     singularity exec --bind /projects/fs1/ /projects/fs1/shared/ctg-containers/bulkRNA/bulkRNA_STARv2.7.6a.sif bcl2fastq \
         -R $run \
         --sample-sheet $ssheet \
         --no-lane-splitting  \
         -r 1 \
         -p 16 \
         -w 1 \
         -o $run/Fastq_Raw/



singularity exec -bind /projects/fs1/ /projects/fs1/shared/ctg-containers/bulkRNA/bulkRNA_STARv2.7.6a.sif bcl2fastq \
    -R /projects/fs1/nas-sync/upload/210510_A00681_0363_BH3MN5DRXY \
    --sample-sheet /projects/fs1/shared/ctg-projects/ctg-rnaseq/2021_044_test/SampleSheet-2021_044_test-demux.csv \
    --no-lane-splitting  \
    -r 1 \
    -p 4  \
    -w 1  \
    --output-dir /projects/fs1/shared/ctg-projects/ctg-rnaseq/2021_044_test/fastq/2021_044_test



    ## Check force_lane !! NOT WORKING (Rscript will test this. ..)
    # allowed_lane=('0' '1' '2')
    # if [[ " "${allowed_lane[@]}" " != *" "$force_lane" "* ]] ;then
    #     #echo "$assay: ok"
    # # else
    #     echo ""
    #     echo "Failed check for '-l' flag. "
    #     echo "$force_lane: not recognized. Valid names are:"
    #     echo "${allowed_lane[@]/%/,}"; echo ""; echo ""
    #     exit 1
    # fi
